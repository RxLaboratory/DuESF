
/**
 * @class
 * @name DuPanel
 * @classdesc For use with {@link DuScriptUI}.<br />
 * A Panel or Window.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuScriptUI.mainPanel} to create a Panel.<br />
 * The DuPanel inherits the Panel or Window object from ScriptUI and has all of its properties and methods.
 */

/**
 * The ScriptUI group where the new controls must be added. Do not add any control directly inside the DuPanel.
 * @name content
 * @type {Group}
 * @memberof DuPanel.prototype
 */

/**
 * A function to reload a script in this panel.
 * @method refreshUi
 * @param {File} file - The script to reload. 
 * @return {boolean} true on success, false otherwise.
 * @memberof DuPanel.prototype
 */

/**
 * Creates the main panel for a script
 * @param {Panel|null} container - The container ('this' in the root of the calling script), either a Panel (when launched from the 'Window' menu) or null (when launched from 'file/scripts/run...')
 * @param {string} [scriptName=DuESF.scriptName] - A name for this UI
 * @param {string[]} [contentAlignment=DuScriptUI.defaultColumnAlignment] - The alignment of the content in the panel
 * @param {string} [borderless=false] - When true, creates a borderless window if container is not a panel
 * @return {DuPanel} The panel created, either a ScriptUI Panel or a ScriptUI Window.
 * @example
 * var ui = DuScriptUI.mainPanel(this,"Test Script");
 * var refreshButton = ui.content.add('button',undefined,"Refresh");
 * refreshButton.onClick = function() { ui.refreshUI( new File($.fileName) ); }; //reloads the current script
 * DuScriptUI.showUI(ui);
 */
DuScriptUI.mainPanel = function( container, scriptName, contentAlignment, bless )
{
    scriptName = def(scriptName, DuESF.scriptName, false);
    contentAlignment = def(contentAlignment, DuScriptUI.defaultColumnAlignment, false);
    bless = def (bless, false);

    scriptName = tr( scriptName );

    var myPal = null;
    container instanceof Panel ? myPal = container : myPal = new Window( 'palette', scriptName, undefined,
    {
        resizeable: true,
        borderless: bless
    } );

    if ( myPal == null ) throw "Failed to create User Interface.";

    myPal.margins = 0;
    myPal.spacing = 0;

    //create margins to dim buttons
    var topMargin = myPal.add( 'button' );
    topMargin.onDraw = function() {};
    topMargin.minimumSize.height = DuScriptUI.defaultMargins;
    topMargin.alignment = [ 'fill', 'top' ];
    topMargin.maximumSize.height = topMargin.minimumSize.height = topMargin.preferredSize.height = DuScriptUI.defaultMargins;

    var mainRow = myPal.add( 'group' );
    mainRow.alignment = contentAlignment;
    mainRow.alignChildren = contentAlignment;
    mainRow.margins = 0;
    mainRow.spacing = 0;

    var leftMargin = mainRow.add( 'button' );
    leftMargin.onDraw = function() {};
    leftMargin.maximumSize.width = leftMargin.minimumSize.width = leftMargin.preferredSize.width = DuScriptUI.defaultMargins;
    leftMargin.alignment = [ 'left', 'fill' ];

    myPal.content = mainRow.add( 'group' );
    myPal.content.margins = 0;
    myPal.content.spacing = DuScriptUI.defaultSpacing;
    myPal.content.alignChildren = DuScriptUI.defaultColumnAlignment;
    myPal.content.orientation = "column";

    var rightMargin = mainRow.add( 'button' );
    rightMargin.onDraw = function() {};
    rightMargin.maximumSize.width = rightMargin.minimumSize.width = rightMargin.preferredSize.width = DuScriptUI.defaultMargins;
    rightMargin.alignment = [ 'right', 'fill' ];

    var bottomMargin = myPal.add( 'button' );
    bottomMargin.onDraw = function() {};
    bottomMargin.maximumSize.height = bottomMargin.minimumSize.height = bottomMargin.preferredSize.height = DuScriptUI.defaultMargins;
    bottomMargin.alignment = [ 'fill', 'bottom' ];

    myPal.addEventListener( "mouseover", DuScriptUI.dimControls );
    topMargin.addEventListener( "mouseover", DuScriptUI.dimControls );
    leftMargin.addEventListener( "mouseover", DuScriptUI.dimControls );
    rightMargin.addEventListener( "mouseover", DuScriptUI.dimControls );
    bottomMargin.addEventListener( "mouseover", DuScriptUI.dimControls );

    return myPal;
}

/**
 * @class
 * @name DuPopup
 * @classdesc For use with {@link DuScriptUI}.<br />
 * A borderless popup, to be tied to a ui control.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuScriptUI.popUp} to create a Popup.<br />
 * The DuPopup inherits the Window object from ScriptUI and has all of its properties and methods.
 * @property {Group} content - The ScriptUI group where the new controls must be added. Do not add any control directly inside the DuPopup.
 * @property {boolean} pinned - true if this popup is "pinned", which means it won't hide when the user clicks outside of the window.
 */

/**
 * Ties the popup to a ui control. The popup will be shown just above the control when it is clicked.<br />
 * The control must have an addEventListener method.
 * @method
 * @memberof DuPopup
 * @name tieTo
 * @param {ScriptUI} [control] - The control
 */

/**
 * Pins the popup (it won't be hidden anymore when deactivated).
 * @method
 * @memberof DuPopup
 * @name pin
 * @param {boolean} [pinned=true] - true to pin the popup, false to un-pin it.
 */

/**
 * Pins the popup (it won't be hidden anymore when deactivated).
 * @method
 * @memberof DuPopup
 * @name pin
 * @param {boolean} [pinned=true] - true to pin the popup, false to un-pin it.
 */

/**
 * Hides the popup.
 * @method
 * @memberof DuPopup
 * @name hidePopup
 */

/**
 * Hides the popup (alias for {@link DuPopup.hidePopup}).
 * @alias DuPopup.hidePopup
 * @method
 * @memberof DuPopup
 * @name cancel
 */

/**
 * Sets this parameter to <code>true</code> to prevent the next show of the popup.<br />
 * This will prevent it from showing once (and only once).
 * @type {Boolean}
 * @memberof DuPopup
 * @name block
 * @default false
 */

/**
 * Creates a borderless popup
 * @param {string} title The title of the popup
 * @param {string[]} [alignment=[ "fill", "top" ]] The alignement of this window
 * @param {boolean} [modal=false] Set the popup to a modal dialog
 * @return {DuPopup} The popup, a ScriptUI Window which is borderless, with a 'tieTo(control)' method.
 * @example
 * var popup = DuScriptUI.popUp( );
 * var popupButton = DuScriptUI.button( myUI, "My Buttton for the popup" );
 * popup.tieTo( popupButton ); // will show the popup when the button is clicked, just above it.
 */
DuScriptUI.popUp = function( title, alignment, modal )
{
    modal = def(modal, false);
    alignment = def( alignment, [ "fill", "top" ] );
    title = def (title, "");
    title = tr( title );
    
    var type = 'palette';
    if (modal) type = 'dialog'; 
    var popup = new Window( type, title, undefined,
    {
        resizeable: false,
        borderless: true
    } );

    popup.margins = 0;
    popup.spacing = 0;
    popup.pinned = false;

    //add stroke around
    function drawBorder ( drawState ) {
        var g = this.graphics;
        var c = DuColor.Color.DARK_GREY;

        var pen = g.newPen( g.PenType.SOLID_COLOR, c, 1 );

        g.newPath();
        if (this.side == 0) {
            g.moveTo (0, 0);
            g.lineTo (this.size.width, 0);
        }
        else if (this.side == 2) {
            g.moveTo (this.size.width, 0);
            g.lineTo (this.size.width, this.size.height);
        }
        else if (this.side == 1) {
            g.moveTo (0, 0);
            g.lineTo (0, this.size.height);
        }
        else if (this.side == 3) {
            g.moveTo (0, this.size.height);
            g.lineTo (this.size.width, this.size.height);
        }

        g.strokePath( pen );
    };

    //create margins to dim buttons
    var topMargin = popup.add( 'button' );
    topMargin.onDraw = drawBorder;
    topMargin.side = 0;
    topMargin.minimumSize.height = DuScriptUI.defaultMargins;
    topMargin.alignment = [ 'fill', 'top' ];
    topMargin.maximumSize.height = topMargin.minimumSize.height = topMargin.preferredSize.height = 1;
    
    var mainRow = popup.add( 'group' );
    mainRow.alignment = alignment;
    mainRow.alignChildren = alignment;
    mainRow.margins = 0;
    mainRow.spacing = 0;

    var leftMargin = mainRow.add( 'button' );
    leftMargin.onDraw = drawBorder;
    leftMargin.side = 1;
    leftMargin.maximumSize.width = leftMargin.minimumSize.width = leftMargin.preferredSize.width = 1;
    leftMargin.alignment = [ 'left', 'fill' ];

    var mainColumn = mainRow.add( 'group' );
    mainColumn.orientation = 'column';
    mainColumn.spacing = 0;
    mainColumn.margins = 0;
    mainColumn.alignment = ['fill','fill'];

    var titleBar = mainColumn.add( 'group' );
    titleBar.margins = 0;
    titleBar.spacing = 0;
    titleBar.alignment = ['fill','top'];
    DuScriptUI.setBackgroundColor( titleBar, DuColor.Color.DARK_GREY );
    //add pin
    var pinButton = DuScriptUI.checkBox(titleBar, '', w12_pin, 'Pin window');
    pinButton.alignment = [ 'left', 'center' ];
    //add title
    var titleLabel = titleBar.add('statictext', undefined,  title);
    titleLabel.alignment = [ 'center', 'center' ];
    if (modal) DuScriptUI.setTextColor(titleLabel, DuColor.Color.APP_HIGHLIGHT_COLOR)
    //add close button
    var closeButton = DuScriptUI.button(titleBar, '', w12_close, 'Close');
    closeButton.alignment = [ 'right', 'center' ];

    popup.content = mainColumn.add( 'group' );
    popup.content.margins = 0;
    popup.content.spacing = 0;
    popup.content.alignChildren = alignment;
    popup.content.orientation = "column";

    var rightMargin = mainRow.add( 'button' );
    rightMargin.onDraw = drawBorder;
    rightMargin.side = 2;
    rightMargin.maximumSize.width = rightMargin.minimumSize.width = rightMargin.preferredSize.width = 1;
    rightMargin.alignment = [ 'right', 'fill' ];

    var bottomMargin = popup.add( 'button' );
    bottomMargin.onDraw = drawBorder;
    bottomMargin.side = 3;
    bottomMargin.maximumSize.height = bottomMargin.minimumSize.height = bottomMargin.preferredSize.height = 1;
    bottomMargin.alignment = [ 'fill', 'bottom' ];

    popup.block = false;

    popup.tieTo = function (control)
    {
        control.addEventListener( 'click', function(e) {
            if(e.view.parent != control) return;

            if (popup.block)
            {
                popup.block = false;
                return;
            }
            var x = e.screenX - e.clientX;
            var y = e.screenY - e.clientY;
            //we need a layout and resize to get the window frame size
            popup.layout.layout( true );
            popup.layout.resize( );
            var location = [x,y];
            location = DuScriptUI.moveInsideScreen( [x, y], popup.frameSize );
            popup.location = location;
            if (!popup.pinned) DuScriptUI.eventFunctionsPaused = true;
            popup.show();
        }, true);
    }

    popup.pin = function(p)
    {
        p = def (p, true);
        popup.pinned = p;
        pinButton.setChecked(p);
    }

    var movingTitle = false;
    var movingPopup = false;
    var startMouseLocation = [0,0];
    var startPopupLocation = [0,0];

    function enterTitleMoveState(e)
    {
        movingTitle = true;
        startMouseLocation = [e.screenX, e.screenY];
        startPopupLocation = [popup.location[0], popup.location[1]];
    }

    function enterPopupMoveState(e)
    {
        movingPopup = true;
        startMouseLocation = [e.screenX, e.screenY];
        startPopupLocation = [popup.location[0], popup.location[1]];
    }

    function movePopup(e)
    {
        if (!movingPopup) return;
        if (movingTitle) return;
        var x = e.screenX - startMouseLocation[0];
        var y = e.screenY - startMouseLocation[1];
        popup.location = [ x, y ] + startPopupLocation;
    }

    function moveTitle(e)
    {
        if (!movingTitle) return;
        var x = e.screenX - startMouseLocation[0];
        var y = e.screenY - startMouseLocation[1];
        popup.location = [ x, y ] + startPopupLocation;
    }

    function endMoveState(e)
    {
        movingTitle = false;
        movingPopup = false;
    }

    function esc(e)
    {
        if ( e.keyName == "Escape") hidePopup();
    }

    function hidePopup()
    {
        popup.hide();
        DuScriptUI.eventFunctionsPaused = false;
    }

    popup.cancel = popup.hidePopup = hidePopup;

    popup.onDeactivate = function () { if (!popup.pinned) hidePopup(); };
    closeButton.onClick = hidePopup;

    pinButton.onClick = function () { popup.pin(pinButton.checked); };

    popup.addEventListener( "mouseover", DuScriptUI.dimControls );
    popup.addEventListener( "keydown", esc );
    topMargin.addEventListener( "mouseover", DuScriptUI.dimControls );
    leftMargin.addEventListener( "mouseover", DuScriptUI.dimControls );
    rightMargin.addEventListener( "mouseover", DuScriptUI.dimControls );
    bottomMargin.addEventListener( "mouseover", DuScriptUI.dimControls );
    titleBar.addEventListener( "mouseover", DuScriptUI.dimControls );

    titleBar.addEventListener( "mousedown", enterPopupMoveState );
    titleBar.addEventListener( "mousemove", movePopup);
    titleBar.addEventListener( "mouseup", endMoveState );
    titleBar.addEventListener( "mouseout", endMoveState );

    titleLabel.addEventListener( "mousedown", enterTitleMoveState );
    titleLabel.addEventListener( "mousemove", moveTitle );
    titleLabel.addEventListener( "mouseup", endMoveState );
    titleLabel.addEventListener( "mouseout", endMoveState );

    if (modal) popup.pin();

    return popup;
}

/**
 * Resizes and shows the main panel of a script
 * @param {Panel|Window}		ui	- The UI created by Duik.ui.createUI
 * @param {boolean}		[enterRunTime=false]	- Set to true to automatically set DuESF to runtime state<br />
 * Set this to false if the ui shown is not the actual main panel of the script and it is shown before the main panel has been loaded.
 */
DuScriptUI.showUI = function( ui, enterRunTime )
{
    enterRunTime = def( enterRunTime, true);

    DuDebug.log( "DuScriptUI.showUI" );

    DuDebug.log( "DuScriptUI.showUI: Defining layout" );
    ui.layout.layout( true );
    DuDebug.log( "DuScriptUI.showUI: Resizing" );
    ui.layout.resize();
    ui.onResizing = ui.onResize = function()
    {
        try
        {
            ui.layout.resize();
        }
        catch ( e )
        {}
    }
    DuDebug.log( "DuScriptUI.showUI: UI Ready" );

    // If it's a Window, it needs to be shown
    if ( ui instanceof Window )
    {
        DuDebug.log( "DuScriptUI.showUI: Showing window" );
        //ui.center();
        ui.show();
        DuDebug.log( "DuScriptUI.showUI: Window visible." );
    }

    DuScriptUI.uiShown = true;

    if (enterRunTime) DuESF.enterRunTime();
}

/**
 * @class
 * @name DuScriptPanel
 * @extends DuPanel
 * @classdesc For use with {@link DuScriptUI}.<br />
 * A Panel or Window.<br />
 * This is not a real class, and cannot be instanciated.<br />
 * Use {@link DuScriptUI.scriptPanel} to create a Panel.<br />
 * @property {Group} settingsGroup - The ScriptUI group where to add the UI for the settings of the script.
 * @property {Group} mainGroup - The ScriptUI group where to add the main UI of the script.
 * @property {DuScriptPanel~onApplySettings} onApplySettings Called when the apply settings button is clicked.
 * @property {DuScriptPanel~onResetSettings} onApplySettings Called when the reset (default) settings button is clicked.
 */

/**
 * The function to execute when the apply settings button is clicked.
 * @callback DuScriptPanel~onApplySettings
 * @memberof DuScriptPanel
 */

/**
 * The function to execute when the reset settings button is clicked.
 * @callback DuScriptPanel~onResetSettings
 * @memberof DuScriptPanel
 */

/**
 * Adds some settings common to all scripts (the file, highlight color, languages...)
 * @method addCommonSettings
 * @memberof DuScriptPanel.prototype
 */

/**
 * Creates the main panel of a script
 * @param {Panel|null} container - The container ('this' in the root of the calling script), either a Panel (when launched from the 'Window' menu) or null (when launched from 'file/scripts/run...')
 * @param {bool} [addSettingsButton=true] - Wether to create a button to open the settings or not
 * @param {bool} [addHelpButton=false] - Wether to create a button to open the help panel or not
 * @param {File} [scriptFile] - The main script file, needed for the refresh button in debug mode
 * @return {DuScriptPanel} The panel created, either a ScriptUI Panel or a ScriptUI Window.
 * @example
 * var ui = DuScriptUI.mainPanel(this,"Test Script");
 * var refreshButton = ui.content.add('button',undefined,"Refresh");
 * refreshButton.onClick = function() { ui.refreshUI( new File($.fileName) ); }; //reloads the current script
 * DuScriptUI.showUI(ui);
 */
DuScriptUI.scriptPanel = function( container, addSettingsButton, addHelpButton, scriptFile )
{
    addSettingsButton = def(addSettingsButton, true);
    addHelpButton = def(addHelpButton, false);

    var panel = DuScriptUI.mainPanel( container, undefined, ['fill','fill'] );
    panel.content.orientation = 'stack';
    panel.content.alignment = ['fill','fill'];

    var contentsMainGroup = DuScriptUI.group(panel.content, 'column');
    contentsMainGroup.alignment = ['fill', 'fill'];
    contentsMainGroup.margins = 0;
    var contentsMainStack = DuScriptUI.group(contentsMainGroup, 'column');
    contentsMainStack.orientation = 'stack';
    contentsMainStack.alignment = ['fill', 'fill'];

    panel.mainGroup = DuScriptUI.group(contentsMainStack, 'column');
    panel.mainGroup.alignment = ['fill', 'fill'];

    //a margin at the bottom (hidden by the bottom bar buttons)
    var mainGroupMarginBottom = DuScriptUI.group(contentsMainGroup, 'column');
    mainGroupMarginBottom.alignment= ['fill', 'bottom'];
    mainGroupMarginBottom.minimumSize = [0, 20];
    
    // == SETTINGS PANEL
    var rootSettingsGroup = DuScriptUI.group(contentsMainStack, 'column');
    rootSettingsGroup.alignment = ['fill', 'fill'];
    rootSettingsGroup.visible = false;
    panel.settingsGroup = DuScriptUI.group(rootSettingsGroup, 'column');
    panel.settingsGroup.alignment = ['fill', 'top'];
    var settingsTitle = DuScriptUI.separator( panel.settingsGroup, tr( '{#} ' + DuScriptUI.String.SETTINGS, undefined, DuESF.scriptName), false, true, false );

    panel.hasCommonSettings = false;
    panel.addCommonSettings = function()
    {
        if (panel.hasCommonSettings) return;
        panel.hasCommonSettings = true;

        var common  = def(DuESF.scriptSettings.data.common, {});
        var debug = def( common.debug, false);

        // Add default settings
        // language
        // Prepare languages, count how many there are, etc
        DuTranslator.getAvailable();
        var languages = DuTranslator.getPrettyNames();
        var languageCount = languages.length;

        var languageGroup = DuScriptUI.group(panel.settingsGroup, 'row');

        if (languageCount > 1)
        {
            panel.settingsGroup.languageSelector = DuScriptUI.selector(
                languageGroup,
                DuScriptUI.String.LANGUAGE_TIP
            )

            for (var i = 0; i < languageCount; i++ )
            {
                panel.settingsGroup.languageSelector.addButton(
                    languages[i],
                    w16_language
                );
            }

            panel.settingsGroup.languageSelector.setCurrentIndex(0);
        }
        
        if (debug)
        {
            var languageExportLabel = DuScriptUI.String.EXPORT_TRANSLATION;
            if (panel.settingsGroup.languageSelector) languageExportLabel = '';
            panel.settingsGroup.exportTranslationButton = DuScriptUI.button(
                languageGroup,
                languageExportLabel,
                DuScriptUI.Icon.LANGUAGE_FILE,
                DuScriptUI.String.EXPORT_TRANSLATION_TIP
            )

            panel.settingsGroup.exportTranslationButton.onClick = function() {
                // Collect registered strings, add them to the list
                var strs = new DuList();
                for (str in DuScriptUI.String)
                {
                    if (DuScriptUI.String.hasOwnProperty(str))
                    {
                        strs.pushUnique( undefined, DuScriptUI.String[str]);
                    }
                }

                DuTranslator.originalStrings.mergeUnique(strs);
                
                if (DuTranslator.originalStrings.length() == 0) return;

                //Ask for file
                var file = File.saveDialog ("Export translation File", "JSON: *.json");
                if (!file) return;

                DuTranslator.generateTranslationFile(file);
            }
        }

        // settings file
        panel.settingsGroup.fileButton = DuScriptUI.fileSelector (
            panel.settingsGroup,
            DuScriptUI.String.SETTINGS_FILE + '...',
            true,
            DuScriptUI.String.SETTINGS_FILE_TIP,
            w16_settings_file,
            'save',
            "JSON: *.json, All Files: *.*",
            'column'
        );
        // color
        panel.settingsGroup.colorSelector = DuScriptUI.selector(
            panel.settingsGroup,
            DuScriptUI.String.COLOR_HIGHLIGHT_TIP
        );
        panel.settingsGroup.colorSelector.addButton(
            DuScriptUI.String.AE_BLUE,
            w8_ae_blue,
            DuScriptUI.String.AE_BLUE_TIP
        );
        panel.settingsGroup.colorSelector.addButton(
            DuScriptUI.String.RX_PURPLE,
            w8_rx_purple,
            DuScriptUI.String.RX_PURPLE_TIP
        );
        panel.settingsGroup.colorSelector.addButton(
            DuScriptUI.String.RX_RED,
            w8_rx_red,
            DuScriptUI.String.RX_RED_TIP
        );
        panel.settingsGroup.colorSelector.addButton(
            DuScriptUI.String.AE_ORANGE,
            w8_ae_orange,
            DuScriptUI.String.AE_ORANGE_TIP
        );
        panel.settingsGroup.colorSelector.addButton(
            DuScriptUI.String.CUSTOM + '...',
            undefined,
            DuScriptUI.String.CUSTOM_COLOR_TIP
        );
        panel.settingsGroup.colorSelector.setCurrentIndex(0);
        // ui mode
        panel.settingsGroup.uiModeSelector = DuScriptUI.selector(
            panel.settingsGroup,
            DuScriptUI.String.UI_MODE_TIP
        )
        panel.settingsGroup.uiModeSelector.addButton(
            DuScriptUI.String.ROOKIE,
            w16_rookie,
            DuScriptUI.String.ROOKIE_UI_TIP
        );
        panel.settingsGroup.uiModeSelector.addButton(
            DuScriptUI.String.STANDARD,
            w16_standard,
            DuScriptUI.String.STANDARD_UI_TIP
        );
        panel.settingsGroup.uiModeSelector.addButton(
            DuScriptUI.String.EXPERT,
            w16_expert,
            DuScriptUI.String.EXPERT_UI_TIP
        );
        panel.settingsGroup.uiModeSelector.setCurrentIndex(0);
        // dev & debug
        panel.settingsGroup.debugButton = DuScriptUI.checkBox (
            panel.settingsGroup,
            DuScriptUI.String.NORMAL_MODE,
            w16_user,
            DuScriptUI.String.DEV_MODE_TIP,
            DuScriptUI.String.DEV_MODE,
            w16_bug
        )

        panel.settingsGroup.fileButton.onChange = function()
        {
            var file = panel.settingsGroup.fileButton.getFile();
            if (file == null) return;
            DuESF.scriptSettings.setFile(file);
            panel.settingsGroup.reset();
        }

        panel.settingsGroup.colorSelector.onChange = function()
        {
            var common  = def(DuESF.scriptSettings.data.common, {});
            var customColor = new DuColor( def( common.highlightColor, DuColor.Color.APP_HIGHLIGHT_COLOR ) );
            var colorIndex = panel.settingsGroup.colorSelector.index;
            if (colorIndex == panel.settingsGroup.colorSelector.items.length -1 )
            {
                var newColor = new DuColor( colorPicker( customColor.floatRGB() ) );
                // If white, the user has canceled
                if ( newColor.equals( DuColor.Color.WHITE ) )
                {
                    panel.settingsGroup.colorSelector.setCurrentIndex(0);
                    return;
                }

                // Store the color for the valid button
                panel.settingsGroup.colorSelector.customColor = newColor;
            }
        }

        // Load settings
        panel.settingsGroup.reset = function()
        {
            var common  = def(DuESF.scriptSettings.data.common, {});
            var highlightSelection = def( common.highlightSelection, 0);
            var currentLanguageName = def( common.currentLanguageName, 'Esperanto');
            var debug = def( common.debug, false);
            var uiMode = def( common.uiMode, 0);
            var customColor = new DuColor( def( common.highlightColor, DuColor.Color.APP_HIGHLIGHT_COLOR ) );
            
            // Settings File
            panel.settingsGroup.fileButton.setPath( DuESF.scriptSettings.file.absoluteURI );

            // Ui mode
            panel.settingsGroup.uiModeSelector.setCurrentIndex( uiMode );

            // Color
            panel.settingsGroup.colorSelector.setCurrentIndex( highlightSelection, true );
            // Set custom
            panel.settingsGroup.colorSelector.customColor = customColor;

            // Language
            if (panel.settingsGroup.languageSelector)
                for (var i = 0 , num = panel.settingsGroup.languageSelector.items.length; i < num; i++)
                {
                    if (panel.settingsGroup.languageSelector.items[i][0] == currentLanguageName)
                    {
                        panel.settingsGroup.languageSelector.setCurrentIndex(i);
                        break;
                    }
                }

            // Debug mode
            panel.settingsGroup.debugButton.setChecked( debug );

            panel.onResetSettings();
        }

        panel.settingsGroup.reset();
    }

    DuScriptUI.separator( rootSettingsGroup );

    panel.settingsGroup.updateButton = DuScriptUI.button(
        rootSettingsGroup,
        DuScriptUI.String.CHECK_UPDATE,
        DuScriptUI.Icon.DOWNLOAD,
        DuScriptUI.String.CHECK_UPDATE,
        false,
        'row',
        'center'
    )

    DuScriptUI.separator( rootSettingsGroup );

    var validGroup = DuScriptUI.group( rootSettingsGroup, 'row');

    panel.settingsGroup.backButton = DuScriptUI.button(
        validGroup,
        DuScriptUI.String.BACK,
        w12_back,
        DuScriptUI.String.CLOSE_SETTINGS,
        false,
        'row',
        'center'
    )
    panel.settingsGroup.resetButton = DuScriptUI.button(
        validGroup,
        DuScriptUI.String.DEFAULT,
        w12_reset,
        DuScriptUI.String.RESET_SETTINGS,
        false,
        'row',
        'center'
    )
    panel.settingsGroup.validButton = DuScriptUI.button(
        validGroup,
        DuScriptUI.String.APPLY,
        w12_check,
        DuScriptUI.String.APPLY_SETTINGS,
        false,
        'row',
        'center'
    )
    
    panel.onApplySettings = function() {};
    panel.onResetSettings = function() {};

    panel.settingsGroup.validButton.onClick = function()
    {
        if (!panel.hasCommonSettings)
        {
            panel.onApplySettings();
            return;
        }
        // Update and Save settings
        DuESF.scriptSettings.data.common = def( DuESF.scriptSettings.data.common, {} );

        // UI Mode
        DuESF.scriptSettings.data.common.uiMode = panel.settingsGroup.uiModeSelector.index;

        // Color
        var colorIndex = panel.settingsGroup.colorSelector.index;
        DuESF.scriptSettings.data.common.highlightSelection = colorIndex;
        // Custom
        if (colorIndex == panel.settingsGroup.colorSelector.items.length -1 )
        {
            // Save and set
            var color = panel.settingsGroup.colorSelector.customColor;
            DuESF.scriptSettings.data.common.highlightColor = color.floatRGBA();
            DuColor.Color.APP_HIGHLIGHT_COLOR = color;
        }
        else if (colorIndex == 0)
        {
            DuESF.scriptSettings.data.common.highlightColor = DuColor.Color.AFTER_EFFECTS_BLUE;
            DuColor.Color.APP_HIGHLIGHT_COLOR = DuColor.Color.AFTER_EFFECTS_BLUE;
        }
        else if (colorIndex == 1)
        {
            DuESF.scriptSettings.data.common.highlightColor = DuColor.Color.RX_PURPLE;
            DuColor.Color.APP_HIGHLIGHT_COLOR = DuColor.Color.RX_PURPLE;
        }
        else if (colorIndex == 2)
        {
            DuESF.scriptSettings.data.common.highlightColor = DuColor.Color.RAINBOX_RED;
            DuColor.Color.APP_HIGHLIGHT_COLOR = DuColor.Color.RAINBOX_RED;
        }
        else if (colorIndex == 3)
        {
            DuESF.scriptSettings.data.common.highlightColor = DuColor.Color.AE_ORANGE;
            DuColor.Color.APP_HIGHLIGHT_COLOR = DuColor.Color.AE_ORANGE;
        }

        // Language
        if (panel.settingsGroup.languageSelector)
        {
            DuESF.scriptSettings.data.common.language = DuTranslator.getLanguageId(panel.settingsGroup.languageSelector.label.text);
            DuESF.scriptSettings.data.common.currentLanguageName = panel.settingsGroup.languageSelector.label.text;
        }
            
        // Dev Mode
        DuESF.scriptSettings.data.common.debug = panel.settingsGroup.debugButton.value;
		DuESF.debug = panel.settingsGroup.debugButton.value;

        DuESF.scriptSettings.save();

        panel.mainGroup.visible = true;
        rootSettingsGroup.visible = false;

        panel.onApplySettings();
    }

    panel.settingsGroup.resetButton.onClick = function()
    {
        DuESF.settings.reset();
        DuESF.scriptSettings.reset();
        panel.settingsGroup.reset();
        panel.onResetSettings();
    }

    panel.settingsGroup.updateButton.onClick = function()
    {
        DuScriptUI.checkUpdate(undefined, undefined, true);
    }

    // == Bottom Line
    // Draw a thin line like other panels
    var bottomUberGroup = DuScriptUI.group(panel.content, 'column');
    bottomUberGroup.alignment = ['fill', 'bottom'];
    bottomUberGroup.margins = 0;
    bottomUberGroup.spacing = 0;

    var bottomLine = DuScriptUI.separator(bottomUberGroup);
    bottomLine.alignment = ['fill', 'bottom'];
    
    panel.bottomGroup = DuScriptUI.group(bottomUberGroup, 'row');
    panel.bottomGroup.margins = 0;

    if (DuESF.bugReportURL != '')
    {
        var bugButton = DuScriptUI.addBugButton( panel.bottomGroup );
        bugButton.alignment = ['left', 'fill'];
    }
    
    if (DuESF.featureRequestURL != '')
    {
        var featureRequestButton = DuScriptUI.addFeatureRequestButton( panel.bottomGroup );
        featureRequestButton.alignment = ['left', 'fill'];
    }
    
    if (addSettingsButton)
    {
        var settingsButton = DuScriptUI.button(
            panel.bottomGroup,
            '',
            w12_settings,
            DuScriptUI.String.EDIT_SETTINGS
            );
        settingsButton.alignment = ['left', 'fill'];

        settingsButton.onClick = function()
        {
            if (!rootSettingsGroup.visible)
            {
                if(panel.hasCommonSettings) panel.settingsGroup.reset();
                panel.mainGroup.visible = false;
                rootSettingsGroup.visible = true;
            }
            else
            {
                panel.mainGroup.visible = true;
                rootSettingsGroup.visible = false;
            }
        }

        panel.settingsGroup.backButton.onClick = function()
        {
            if( panel.hasCommonSettings ) panel.settingsGroup.reset();
            panel.mainGroup.visible = true;
            rootSettingsGroup.visible = false;
        }

    }

    if (addHelpButton)
    {
        var helpButton = DuScriptUI.addHelpButton( panel.bottomGroup, false );
        helpButton.alignment = ['left', 'fill'];
    }

    var donateButton = DuScriptUI.addDonateButton( panel.bottomGroup, false);
    donateButton.alignment = ['left', 'fill'];

    var versionButton = DuScriptUI.versionButton(
        panel.bottomGroup
        );
    versionButton.alignment = ['right', 'fill'];
    
    //Refresh button
    if ( DuESF.debug && (scriptFile instanceof File) && scriptFile.exists )
    {
        var refreshButton = panel.bottomGroup.add( 'button', undefined, 'R' );
        refreshButton.alignment = [ 'right', 'bottom' ];
        refreshButton.maximumSize = [ 20, 20 ];
        refreshButton.onClick = function()
        {
            DuScriptUI.refreshPanel( panel, scriptFile );
        };
    }

    return panel;
}

DuScriptUI.refreshPanel = function( panel, scriptFile )
{
    function refresh ()
    {
        var ok = false;
        DuScriptUI.dimControls();
        // Remove everything
        for ( var i = panel.children.length - 1; i >= 0; i-- )
        {
            panel.remove( this.children[ i ] );
        }

        // Run the scriptFile
        try
        {
            ok = true;
            $.evalFile( scriptFile );
        }
        catch ( err )
        {
            ok = false;
            //add debug info
            if ( DuESF.debug )
            {
                panel.add( 'statictext', undefined, err.fileName,
                {
                    multiline: true
                } );
                panel.add( 'statictext', undefined, err.message,
                {
                    multiline: true
                } );
                panel.add( 'statictext', undefined, "on line" + err.line );
                //add a refresh button
                var button = panel.add( 'button', undefined, "Refresh UI" );
                button.onClick = function()
                {
                    panel.refreshUI( scriptFile )
                };
            }
        }

        // Recalculate UI
        panel.layout.layout( true );
        panel.layout.resize();
        return ok;
    }
    return refresh.call( panel );
}