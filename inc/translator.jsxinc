/**
 * Creates a new string translation.
 * @class
 * @classdesc An translation for a string.
 * @param {string} source - The source string
 * @param {string} [translation=''] - The translated string
 * @param {string} [comment=''] - A comment to explain what needs to be explained
 * @param {string} [context=''] - The context where the string is used
 * @param {int} [contextId=0] - A unique id for the couple source/context
 */
function DuTranslation(source,translation,comment,context,contextId)
{
	translation = def(translation, tr(source) );
	comment = def(comment, '');
	context = def(context, '');
	contextId = def(contextId, 0);
	/**
		* The source string
		* @memberof DuTranslation.prototype
		* @name source
		* @type {string}
	*/
	this.source = source;
	/**
		* The translated string
		* @memberof DuTranslation.prototype
		* @name translation
		* @type {string}
	*/
	this.translation = translation;
	/**
		* A comment to explain what needs to be explained
		* @memberof DuTranslation.prototype
		* @name comment
		* @type {string}
	*/
	this.comment = comment;
	/**
		* The context where the string is used
		* @memberof DuTranslation.prototype
		* @name context
		* @type {string}
	*/
	this.context = context;
	/**
		* A unique id for the couple source/context
		* @memberof DuTranslation.prototype
		* @name contextId
		* @type {string}
	*/
	this.contextId = contextId;
}

/**
 * The ExtendScript translator part of the Dutranslator Framework<br />
 * see {@link https://github.com/Rainbox-dev/Dutranslator}
 * @namespace
 */
var DuTranslator = {};

/**
 * The current language id (fr, en, ..)
 * @memberof DuTranslator
 * @readonly
 * @type {string}
 */
DuTranslator.current = '';

/**
 * The current language name
 * @memberof DuTranslator
 * @readonly
 * @type {string}
 */
DuTranslator.currentName = '';

/* low-level, undocumented
 *
 * A map containing available languages.
 * There is a language name and a file name for each language id.
 * languages["fr_FR"] ["name"] is "Francais" for example.
 * Will be filled when executing Dutranslator.getAvailable().
 */
DuTranslator.languages = {};

/* low-level, undocumented
 * The translated strings  of the current language
 * An array of compounds containing the source, the translation and the context
 */
DuTranslator.localizedStrings = [];

/**
 * Some Settings for the translator
 * @namespace
 * @memberof DuTranslator
 */
DuTranslator.Settings = {}

/**
 * The folder containing the translation files
 * @memberof DuTranslator.Settings
 * @type {string}
 * @default DuESF.scriptSettings.file.parent
 *
 */
DuTranslator.Settings.folder = File($.fileName).path + "/";

/**
 * The prefix in the translation filenames
 * @memberof DuTranslator.Settings
 * @type {string}
 * @default "thisScriptFileName_"
 */
DuTranslator.Settings.prefix = File($.fileName).name.substring(0,File($.fileName).name.lastIndexOf('.')) + "_";

/**
 * The suffix (including file extension) in the translation filenames
 * @memberof DuTranslator.Settings
 * @type {string}
 * @default ".json"
 */
DuTranslator.Settings.suffix = ".json";

/**
 * The application name (root of the json translations)
 * @memberof DuTranslator.Settings
 * @type {string}
 * @default "duesf"
 */
DuTranslator.Settings.name = "duesf";

/**
 * The original languageId
 * @memberof DuTranslator.Settings
 * @type {string}
 * @default "en"
 */
DuTranslator.Settings.originalLanguageId = "en";

/**
 * The original language name
 * @memberof DuTranslator.Settings
 * @type {string}
 * @default "English"
 */
DuTranslator.Settings.originalLanguageName = "English";

/**
 * The list of strings which have been translated.<br />
 * This can be used to easily generate a new empty translation file.
 * @type {DuList}
 * @memberof DuTranslator.Settings
 */
DuTranslator.originalStrings = new DuList();

/**
 * Load the list of available languages.<br />
 * <br />
 * If the language id and or the language name can't be found in the file, the file name will be used<br />
 * to determine the language id and the name will be set as the id.<br />
 *
 * @return {int} A success code<br />
 * 0	Success<br />
 * 1	One of the file haven't been correctly opened
 */
DuTranslator.getAvailable = function ()
{
	DuTranslator.languages = {};
	//Add original language
	DuTranslator.languages[DuTranslator.Settings.originalLanguageId] = {
		"name": DuTranslator.Settings.originalLanguageName,
		"file": undefined
	};

	var folder = new Folder(DuTranslator.Settings.folder);

	// Get the list of translations
	var languageFiles = folder.getFiles(DuTranslator.Settings.prefix + '*' + DuTranslator.Settings.suffix);

	for (var i = 0 ; i < languageFiles.length ; i++)
	{
		  var fileName = languageFiles[i].name;
		  var langId = "";
		  var langName = "";

		  // Determine the language name and the language id by reading the file
		  // Values are stored at the top so it should be fase
		  var file = new File(folder.absoluteURI + "/" + fileName);
		  if(!file.open("r")) return 1; // Unable to open the file

		  // Line by line reading
		  while(langName == "" || langId == "" && !file.eof )
		  {
			  var line = file.readln();
			  var indexName = line.lastIndexOf("languageName");
			  var indexId = line.lastIndexOf("languageId");

			  var index;
			  if(indexName != -1 && langName == "") index = indexName;
			  else if(indexId != -1 && langId == "") index = indexId;
			  else continue;
			  // ..... "lang" : "value"
			  line = line.substring(index, line.length);
			  // .lang" : "value"
			  line = line.substring(line.indexOf("\"") + 1, line.length);
			  // : "value"
			  line = line.substring(line.indexOf("\"") + 1, line.length);
			  // value"
			  line = line.substring(0, line.indexOf("\""));
			  // value
			   if(indexName != -1 && langName == "") langName = line ;
			  else if(indexId != -1 && langId == "") langId = line ;
			  else continue;
		  }

		  file.close();

		  if(langName == "") continue;

		  if(langId == "") langId = fileName.replace(DuTranslator.Settings.prefix, "").replace(DuTranslator.Settings.suffix, "");

		  DuTranslator.languages[langId] = {
			  "name": langName,
			  "file":  DuTranslator.Settings.folder + "/" + fileName
		  };

	}

}

/**
  * Returns the pretty name of a given language
  * @param {string} langId - The id of the request language
  * @return {string}
 */
DuTranslator.getPrettyName = function(langId)
{
	if(!DuTranslator.languages[langId]) return 1;
	return DuTranslator.languages[langId]["name"];
}

/**
  * Returns the language id of a given language name
  * @param {string} prettyName - The pretty name of the request language
  * @return {string}
 */
DuTranslator.getLanguageId = function(prettyName)
{
	for(var langId in DuTranslator.languages)
	{
		if(DuTranslator.languages[langId]["name"] == prettyName) return langId;
	}
	return '';
}

/**
  * Returns a list containing pretty names of all languages
  * @param {string} langId - The id of the request language
  * @return {string[]}
 */
DuTranslator.getPrettyNames = function()
{
	var res = [];
	for(var langId in DuTranslator.languages)
	{
		res[res.length] = DuTranslator.languages[langId]["name"];
	}

	// Order the list by name
	res.sort ();
	return res;
}

/**
 * Set the current language
 * @param {string} languageId - The id of the language to set
 * @return {Boolean} Success
 */
DuTranslator.setLanguage = function (languageId)
{
	for (var langId in DuTranslator.languages)
	{
		if (langId == languageId)
		{
			DuTranslator.current = languageId;
			DuTranslator.currentName = DuTranslator.getPrettyName(languageId);

			// Reinit
			DuTranslator.originalStrings = new DuList();
			DuScriptUI.String.Original = def( DuScriptUI.String.Original, [] );
			for (key in DuScriptUI.String)
			{
				if (DuScriptUI.String.Original.hasOwnProperty(key))
				{
					DuScriptUI.String[key] = DuScriptUI.String.Original[key];
				}
			}

			// Load translation file
			if (languageId == DuTranslator.Settings.originalLanguageId)
			{
				DuTranslator.localizedStrings = [];
			}
			else
			{
				var fPath = DuTranslator.languages[langId]["file"];
				var file = new File(fPath);

				var jsonData = DuFile.parseJSON(file);

				if(!jsonData[DuTranslator.Settings.name] ||
					jsonData[DuTranslator.Settings.name].length != 2 ||
					!jsonData[DuTranslator.Settings.name][1]["translations"]) return 2; // Wrong json format

				var translations = jsonData[DuTranslator.Settings.name][1]["translations"];
				DuTranslator.localizedStrings = translations;
			}

			// Translate UI
			for (key in DuScriptUI.String)
			{
				if (DuScriptUI.String.hasOwnProperty(key))
				{
					var str = DuScriptUI.String[key];
					DuScriptUI.String[key] = tr(str, key);
					DuScriptUI.String.Original[key] = str;
				}
			}

			return true;
		}
	}
	return false;
}

/**
 * Set the current language with a given pretty name
 * @param {string} languageName - The pretty name of the language to set
 * @return {Boolean} Success
 */
DuTranslator.setPrettyLanguage = function (languageName)
{
	var langId = DuTranslator.getLanguageId(languageName);
	if(langId == '') return false;

	return DuTranslator.setLanguage(langId);
}

/**
 * Creates a file for translation with the given base strings.
 * @memberof DuTranslator
 * @param {DuTranslation[]|DuList.<string>|string[]} [translations=DuTranslator.originalStrings] - The translations or source strings to be included in the translation file.
 * @param {File|string} file - The file or URI
 * @param {string} [appName=DuESF.scriptName] - A name for the app using this translation file.
 * @param {string} [version=DuESF.scriptVersion.fullVersion] - A version (as a string) for this translation file or app.
 * @param {string} [languageId=DuTranslator.current] - A version (as a string) for this translation file or app.
 * @param {string} [languageName=DuTranslator.currentName] - A version (as a string) for this translation file or app.
 * @param {Boolean} [mergeScriptuiStrings=true] - Merges the strings declared in DuScriptui to the translations.
 */
DuTranslator.generateTranslationFile = function (file,translations,appName,version,languageId,languageName,mergeScriptuiStrings)
{
	if (!(file instanceof File)) file = new File(file);
	translations = def(translations, DuTranslator.originalStrings);
	appName = def( appName, DuESF.scriptName);
	version = def(version, DuESF.scriptVersion.fullVersion);
	languageId = def( languageId, DuTranslator.current);
	languageName = def( languageName, DuTranslator.currentName );

	if (translations instanceof DuList) translations = translations.list;
	if (translations.length == 0) return;

	//if translations is an array of strings, convert to translations
	translations = DuTranslator.generateTranslations(translations, mergeScriptuiStrings);

	var data = {};
	data[appName] = [];
	var metaData = {};
	metaData.languageId = languageId;
	metaData.languageName = languageName;
	metaData.version = version;
	data[appName].push(metaData);
	var translationsObject = {};
	translationsObject.translations = translations;
	data[appName].push(translationsObject);

	DuFile.saveJSON(data,file);
}

/**
 * Converts an Array of strings to an Array of empty translations
 * @memberof DuTranslator
 * @param {string[]|DuList.<string>} strings - The base strings to convert.
 * @param {Boolean} [mergeScriptuiStrings=true] - Merges the strings declared in DuScriptui to the translations.
 * @return {string[]} The translations
 */
DuTranslator.generateTranslations = function (strings,mergeScriptuiStrings)
{
	mergeScriptuiStrings = def(mergeScriptuiStrings, true);
	strings = new DuList(strings);
	var translations = new DuList();

	function compareTranslation(trA, trB)
	{
		if (trA.source != trB.source) return false;
		if (trA.context == '') return true;
		if (trB.context == '') return true;
		return trA.context == trB.context;
	}

	if (mergeScriptuiStrings)
	{
		// Collect registered strings, add them to the list
		for (key in DuScriptUI.String)
		{
			if (DuScriptUI.String.hasOwnProperty(key))
			{
				var str = DuScriptUI.String[key];
				var trnltn = new DuTranslation(str);
				trnltn.context = key;
				translations.pushUnique( compareTranslation, trnltn);
			}
		}
	}

	for (var i = 0, num = strings.length(); i < num ; i++)
	{
		var str = strings.at(i);
		if (typeof str === 'string')
		{
			var trnltn = new DuTranslation(str);
			if (typeof str.context !== 'undefined') trnltn.context = str.context;
			if (typeof str.args !== 'undefined') trnltn.comment = "{#} placeholder: " + str.args.join(', ');
			translations.pushUnique(compareTranslation, trnltn);
		}
		else translations.pushUnique(compareTranslation, str);		
	}

	return translations.list;
}

/**
 * Translate a given string based on the current language<br />
 * see {@link DuTranslator} for more details about the translation framework.
 * @function
 * @global
 * @param {string} str - 		The text to be translated
 * @param {int|string} context - 	Can be an integer or a string which is related to contextId or context in a translation file
 * @param {string[]} args -	Args to format into the translated string, default is []<br />
 * For example, when calling <code>tr("Welcome {#}", -1, "Paul")</code>, the output will be <code>"Welcome Paul"</code><br />
 * If too many args are given, they're ignored<br />
 * If not enough args are given, <code>"{#}"</code> is replaced with <code>"?"</code>
 * @return {string} The translated text or the original string if nothing is set or available
 */
function tr(str, context, args)
{
	context = def(context, -1);
	if ( DuDebug.checkVar( str, 'str', 'string', "DuTranslator::tr()" ) !== true ) return str;
	if (str == '') return str;

	DuTranslator.originalStrings.pushUnique( undefined, str );

	var useContextId = true;
	if (typeof context === 'string' || context instanceof String) useContextId = false;
	else if (context < 0) context = -1;

	var languageNumber = -1;
	var res = str;

	//a function to get the translation id from a given string
	function getTranslationId( stri, noCapsNorSpaces )
	{
		noCapsNorSpaces = def (noCapsNorSpaces, false);

		for (var i = 0, n = DuTranslator.localizedStrings.length ; i < n ; i++)
		{
			var localizedString = DuTranslator.localizedStrings[i];
			var testString = localizedString["source"];
			if (noCapsNorSpaces) testString = testString.replace(/[\s\n\r]+/g,'');

			if (testString != stri) continue;

			if (context === -1) return i;
			// Check context
			if (useContextId && localizedString["contextId"] === context) return i;
			else if (localizedString["context"] === context) return i;
		}

		return -1;
	}

	// If a language is set, search for the translation
	if (DuTranslator.current != DuTranslator.Settings.originalLanguageId)
	{
		// Get the translation
		var stringNumber = getTranslationId( str )
		
		// If a translation is found, set it to res
		if (stringNumber > -1) res = DuTranslator.localizedStrings[stringNumber]["translation"];
		if (!res) res = str;
		if (res == "") res = str;
	}

	// Args process
	res = DuString.args(res, args);

	return res;
}

// Low-level undocumented function. Called by DuESF.init()
DuTranslator.init = function() {
	DuTranslator.Settings.name = DuESF.scriptName;
	DuTranslator.Settings.folder = DuESF.scriptSettings.file.parent.absoluteURI + '/';
	DuTranslator.Settings.prefix = DuESF.scriptName;
}